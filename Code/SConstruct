# recreate the top level SConstruct so we can
# build these independent of the core

import os
import os.path

####
# the default SConscript...will be created if none exist
####
default_sconscript = """import glob

####
# import the environment
####
Import('env extra_obj build_dir')

####
# build sources
####
srcs = map(lambda x,bd=build_dir: '%%s/%%s' %% (bd,x), glob.glob("*.cpp"))
objs = env.SharedObject(srcs)

####
# build the plug-in library and set up an alias to ease building it later
####
lib = env.SharedLibrary('%%s/%s' %% build_dir,objs+extra_obj)
libInstall = env.Install(env["PLUGINDIR"], lib)
env.Alias('%s', libInstall)

####
# return the plug-in library
####
Return("libInstall")
"""


####
# END DEFAULT SCONSCRIPT
####

####
# Set up the options and environment
####
opts = Options()
opts.AddOptions(BoolOption('RELEASE','False for debug, true for release',0),
                       ('SDKDEBUG','True if linking against a debug mode SDK',0),
                       ('ignore','List of plugins which should not be built',''))
opts.Add('BUILDDIR','Directory for build files',"Build")
opts.Add('CACHEDIR','Directory for cache files. Default is not caching.','')

TOOLPATH = [Dir("#/CompileSettings").abspath,Dir(os.environ["OPTICKS_CODE_DIR"]+"/application/CompileSettings").abspath]
OPTICKSPLATFORM = "%s-%s" % (os.environ['OSTYPE'],os.environ['MACHTYPE'])

env = Environment(options=opts,
                  OPTICKSPLATFORM=OPTICKSPLATFORM,
                  ENV=os.environ,
                  tools=["default","qt4","xercesc","boost"],
                  toolpath=TOOLPATH)
if env['RELEASE']:
   MODE='release'
else:
   MODE='debug'
if env['SDKDEBUG']:
   SDKMODE='debug'
else:
   SDKMODE='release'
BUILDDIR = env.Dir(env["BUILDDIR"]).abspath
OPTICKSBUILDDIR = os.path.abspath(os.environ["OPTICKS_CODE_DIR"]) + "/Build"
env["PLUGINDIR"] = '%s/Binaries-%s-%s/PlugIns' % (BUILDDIR,OPTICKSPLATFORM,MODE)
env["BINDIR"] = '%s/Binaries-%s-%s/Bin' % (OPTICKSBUILDDIR,OPTICKSPLATFORM,SDKMODE)
env["OPTICKSLIBDIR"] = '%s/Binaries-%s-%s/Lib' % (OPTICKSBUILDDIR,OPTICKSPLATFORM,SDKMODE)
env["LIBDIR"] = '%s/Binaries-%s-%s/Lib' % (BUILDDIR,OPTICKSPLATFORM,MODE)
env["BUILDDIR"] = '%s/%s-%s/PlugIns' % (BUILDDIR,OPTICKSPLATFORM,MODE)
env["COREDIR"] = os.path.abspath(os.environ["OPTICKS_CODE_DIR"]) + "/application"

Help(opts.GenerateHelpText(env))
env["QT_MODULES"] = ["QtCore","QtGui","Qt3Support"]
env.Qt4AddModules(env["QT_MODULES"])

env['SHLIBPREFIX'] = ""
env.Append(CPPDEFINES=["_USRDLL"],
           LIBPATH=[env["OPTICKSLIBDIR"],env["LIBDIR"]])
if OPTICKSPLATFORM == 'solaris-sparc':
   env.Append(CXXFLAGS="-library=stlport4 -m64 -xcode=pic32 -erroff=nonewline",
              SHLINKFLAGS="-library=stlport4 -m64 -xcode=pic32 -mt -L/usr/sfw/lib/sparcv9",
              LIBS=env["QT_MODULES"] + ["SpectralUtilities","PlugInLib","PlugInUtilities","PlugInLib","nsl","dl","GLU","GL","Xm","Xext","X11","m"])
else:
   env.Append(CXXFLAGS="-m64 -fpic -pthread -w",
              LINKFLAGS="-melf_x86_64 -Wl,-E",
              LIBS=env["QT_MODULES"] + ["SpectralUtilities","PlugInLib","PlugInUtilities","PlugInLib","dl","GLU","GL","Xext","Xrender","X11","m"])
env.BuildDir(env["BUILDDIR"], "#", duplicate=0)

if MODE == 'release':
   if OPTICKSPLATFORM == "solaris-sparc":
      env.Append(CXXFLAGS="-xO3")
   else:
      env.Append(CXXFLAGS="-O3")
else:
   env.Append(CXXFLAGS="-g")
   env.Append(CPPDEFINES=["DEBUG"])

ignore = Split(env['ignore'])

plugins = map(lambda x: x.split('./')[-1].split('/')[0],
              map(lambda x: x[0],
                  filter(lambda x: 'ModuleManager.cpp' in x[2] or 'modulemanager.cpp' in x[2],os.walk('.'))))

# check for extra vars
if os.path.exists(".extravars"):
   fp=open(".extravars","r")
   exec(fp.read())
   fp.close()

incdirs = [".",
           "$COREDIR/Interfaces",
           "$COREDIR/PlugInLib",
           "$COREDIR/PlugInUtilities/Interfaces",
           "$COREDIR/PlugInUtilities/pthreads-wrapper",
           "#/Include",
           "#/SpectralUtilities"]
env.Append(CPPPATH=incdirs)
if len(env["CACHEDIR"]) > 0:
   print "Enable caching to",env["CACHEDIR"]
   env.CacheDir(env["CACHEDIR"])
env.SConscript('SpectralUtilities/SConscript', exports='env')

###
# tell SCons this is a shared object
###
extra_obj_file = env.File("%s/ModuleShell.os" % env["OPTICKSLIBDIR"])
class SharedObjectProxy:
   def __init__(self):
      self.shared = 1
extra_obj_file.attributes = SharedObjectProxy()
extra_obj = [extra_obj_file]

libs = []
Export('env','MODE','extra_obj','TOOLPATH','OPTICKSPLATFORM')

for plugin in plugins:
   if plugin in ignore:
      continue
   if not os.path.isfile('%s/SConscript' % plugin):
      try:
         fp = open('%s/SConscript' % plugin, 'w')
         fp.write(default_sconscript % (plugin,plugin))
         fp.close()
         print 'Created a default SConscript for plugin %s..remember to check it in' % plugin
      except:
         continue
   src_dir = '#/%s' % plugin
   build_dir = '%s/%s' % (env["BUILDDIR"], plugin)
   env.BuildDir(build_dir, src_dir, duplicate=0)
   libs.append(env.SConscript('%s/SConscript' % plugin, exports='build_dir'))

####
# Install the plug-ins to the proper directories
# and set up some useful aliases
####
all = env.Alias('all', libs)
Default(all)
